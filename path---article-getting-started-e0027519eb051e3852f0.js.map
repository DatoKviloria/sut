{"version":3,"sources":["webpack:///path---article-getting-started-e0027519eb051e3852f0.js","webpack:///./.cache/json/article-getting-started.json"],"names":["webpackJsonp","328","module","exports","data","markdownRemark","html","frontmatter","date","path","title","author","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,yiHAAw6GC,aAAuJC,KAAA,iBAAAC,KAAA,2BAAAC,MAAA,mCAAAC,OAAA,oBAAiIC","file":"path---article-getting-started-e0027519eb051e3852f0.js","sourcesContent":["webpackJsonp([104230059096851],{\n\n/***/ 328:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Installing &#x26; Setup</h2>\\n<pre><code>    # Install sut test runner    \\n    $ npm install --save-dev sut@neo\\n\\n    # Install Sut Assert library\\n    $ npm install --save-dev sut@assert\\n</code></pre>\\n<h2>Simple Strategy Based Test Example</h2>\\n<p>File: <b>app.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// Create Test Strategy/Gtto\\nconst exampleTestStrategy = () =>\\n    def('Example Testing ...', () => \\n        Assert.equal(1, 1, 'this test must passed')\\n        Assert.okay(false, 'this test must failed')        \\n    )\\n\\n// Call main sut container to run tests\\nsut(\\n    exampleTestStrategy,\\n    // Display Statistic\\n    sut.stats\\n)\\n</code></pre>\\n<h2>SUT Helper Example &#x26; Async Test's</h2>\\n<p>File: <b>async.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// install node-fetch\\n// npm install node-fetch\\n\\n// Create Custom SUT Helper\\nsut.include({\\n    api: {\\n        // Return's promise\\n        response: url => fetch(url)\\n            .then(response => response.json())\\n    }\\n})\\n\\n// Create Test Strategy/Getto\\nconst testStrategyForAPI = () =>\\n    // Make CB function async\\n    def('USER EP Testing ...', async () => \\n        Assert.equal(\\n            // Access to sut custom helper\\n            await sut.helper.api.response('https://jsonplaceholder.typicode.com/posts/1')\\n                .then((data) => data.userId)\\n        , 1, 'EP Works Correctly; user id === 1')        \\n    )\\n\\n// Call main sut container to run tests\\nsut(\\n    testStrategyForAPI,\\n    // Display Statistic\\n    sut.stats\\n)\\n</code></pre>\\n<h2>Create Sut Server and display data on sut-ui</h2>\\n<p>File: <b>server.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// Create Test Strategy/Gtto\\nconst exampleTestStrategy = () =>\\n    def('Example Testing ...', () => \\n        Assert.equal(1, 1, 'this test must passed')\\n        Assert.okay(false, 'this test must failed')        \\n    )\\n\\n// Call main sut container to run tests\\nsut(\\n    exampleTestStrategy,\\n    // We Dont Care Stats anymore\\n    // sut.stats\\n)\\n\\n// Craete Options Object and Describe server\\nconst options = {\\n  server: {\\n    port: 1961, // Server Port\\n    data: sut.store.all // Sut Storage\\n  }\\n};\\n\\n// Pass Options to connect function\\nsut.connect(options);\\n\\n// Copy link and visit or share ...\\n</code></pre>\\n<h2>Customize Terminal output</h2>\\n<p>File: <b>app.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// install node-emojy module\\n// npm install node-meoji --save-dev\\nconst emoji = require('node-emoji');\\n\\n// Create Test Strategy/Gtto\\nconst exampleTestStrategy = () =>\\n    def('Example Testing ...', () => \\n        Assert.equal(1, 1, 'this test must passed')\\n        Assert.okay(false, 'this test must failed')        \\n    )\\n\\n// Call sut.template function\\nsut.tempalte({\\n    passed: emoji.get(':heart:'),\\n    failed: emoji.get(':poop:'),\\n    removeColor: true\\n});\\n\\n// Call main sut container to run tests\\nsut(\\n    exampleTestStrategy,\\n    // Display Statistic\\n    sut.stats\\n)\\n</code></pre>\",\"frontmatter\":{\"date\":\"March 21, 2018\",\"path\":\"/article/getting-started\",\"title\":\"Getting Started with SUT 2.0 Neo\",\"author\":\"Daivd Kviloria\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---article-getting-started-e0027519eb051e3852f0.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Installing &#x26; Setup</h2>\\n<pre><code>    # Install sut test runner    \\n    $ npm install --save-dev sut@neo\\n\\n    # Install Sut Assert library\\n    $ npm install --save-dev sut@assert\\n</code></pre>\\n<h2>Simple Strategy Based Test Example</h2>\\n<p>File: <b>app.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// Create Test Strategy/Gtto\\nconst exampleTestStrategy = () =>\\n    def('Example Testing ...', () => \\n        Assert.equal(1, 1, 'this test must passed')\\n        Assert.okay(false, 'this test must failed')        \\n    )\\n\\n// Call main sut container to run tests\\nsut(\\n    exampleTestStrategy,\\n    // Display Statistic\\n    sut.stats\\n)\\n</code></pre>\\n<h2>SUT Helper Example &#x26; Async Test's</h2>\\n<p>File: <b>async.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// install node-fetch\\n// npm install node-fetch\\n\\n// Create Custom SUT Helper\\nsut.include({\\n    api: {\\n        // Return's promise\\n        response: url => fetch(url)\\n            .then(response => response.json())\\n    }\\n})\\n\\n// Create Test Strategy/Getto\\nconst testStrategyForAPI = () =>\\n    // Make CB function async\\n    def('USER EP Testing ...', async () => \\n        Assert.equal(\\n            // Access to sut custom helper\\n            await sut.helper.api.response('https://jsonplaceholder.typicode.com/posts/1')\\n                .then((data) => data.userId)\\n        , 1, 'EP Works Correctly; user id === 1')        \\n    )\\n\\n// Call main sut container to run tests\\nsut(\\n    testStrategyForAPI,\\n    // Display Statistic\\n    sut.stats\\n)\\n</code></pre>\\n<h2>Create Sut Server and display data on sut-ui</h2>\\n<p>File: <b>server.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// Create Test Strategy/Gtto\\nconst exampleTestStrategy = () =>\\n    def('Example Testing ...', () => \\n        Assert.equal(1, 1, 'this test must passed')\\n        Assert.okay(false, 'this test must failed')        \\n    )\\n\\n// Call main sut container to run tests\\nsut(\\n    exampleTestStrategy,\\n    // We Dont Care Stats anymore\\n    // sut.stats\\n)\\n\\n// Craete Options Object and Describe server\\nconst options = {\\n  server: {\\n    port: 1961, // Server Port\\n    data: sut.store.all // Sut Storage\\n  }\\n};\\n\\n// Pass Options to connect function\\nsut.connect(options);\\n\\n// Copy link and visit or share ...\\n</code></pre>\\n<h2>Customize Terminal output</h2>\\n<p>File: <b>app.test.js</b></p>\\n<pre><code class=\\\"language-javascript\\\">// import SUTJS LTS\\nconst { sut, def } = require('sut@neo');\\n\\n// import SUT Assert Library\\nconst assert = require('sut@assert');\\n\\n// install node-emojy module\\n// npm install node-meoji --save-dev\\nconst emoji = require('node-emoji');\\n\\n// Create Test Strategy/Gtto\\nconst exampleTestStrategy = () =>\\n    def('Example Testing ...', () => \\n        Assert.equal(1, 1, 'this test must passed')\\n        Assert.okay(false, 'this test must failed')        \\n    )\\n\\n// Call sut.template function\\nsut.tempalte({\\n    passed: emoji.get(':heart:'),\\n    failed: emoji.get(':poop:'),\\n    removeColor: true\\n});\\n\\n// Call main sut container to run tests\\nsut(\\n    exampleTestStrategy,\\n    // Display Statistic\\n    sut.stats\\n)\\n</code></pre>\",\"frontmatter\":{\"date\":\"March 21, 2018\",\"path\":\"/article/getting-started\",\"title\":\"Getting Started with SUT 2.0 Neo\",\"author\":\"Daivd Kviloria\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/article-getting-started.json\n// module id = 328\n// module chunks = 104230059096851"],"sourceRoot":""}